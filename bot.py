import logging
import os
import json
from calendar import weekday, month
from datetime import time
from datetime import datetime
import json
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTIONS_FILE = "subscriptions.json"


def load_subscriptions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        if os.path.exists(SUBSCRIPTIONS_FILE):
            with open(SUBSCRIPTIONS_FILE, 'r', encoding='utf-8') as f:
                return set(json.load(f))
        return set()
    except (json.JSONDecodeError, FileNotFoundError) as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª. –û—à–∏–±–∫–∞: {e}")
        return set()


def save_subscriptions(subscriptions):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    try:
        with open(SUBSCRIPTIONS_FILE, 'w', encoding='utf-8') as f:
            json.dump(list(subscriptions), f, ensure_ascii=False, indent=2)
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscriptions)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
subscribed_users = load_subscriptions()
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(subscribed_users)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")


async def send_daily_notification(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –¥–µ–π–ª–∏–∫–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    global subscribed_users
    subscribed_users = load_subscriptions()

    if not subscribed_users:
        logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ (–∏–ª–∏ None –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    holiday_data = check_if_daily_is_thematic()

    if not holiday_data:
        logger.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–π–ª–∏–∫. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
        return
    # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
    screenshot_path = "screenshots/" + holiday_data['screenshot']
    holiday_name = holiday_data['name']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    caption = f"üåö –°–µ–≥–æ–¥–Ω—è {holiday_name} - —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–π–ª–∏–∫! –£–¥–∞—á–∏!"

    successful_sends = 0
    failed_sends = 0
    users_to_notify = subscribed_users.copy()

    for user_id in users_to_notify:
        try:
            if screenshot_path and os.path.exists(screenshot_path):
                with open(screenshot_path, 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption=caption
                    )
            else:
                await context.bot.send_message(chat_id=user_id, text=caption)

            successful_sends += 1
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            logger.info(f"Error: {e}")
            pass

    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –£—Å–ø–µ—à–Ω–æ: {successful_sends}, –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_sends}")


def check_if_daily_is_thematic():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None."""
    from datetime import datetime
    import json

    today = datetime.now()
    month_day = (today.month, today.day)

    try:
        with open('thematic_dates.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        for holiday in data['thematic_dates']:
            if (holiday['month'], holiday['day']) == month_day:
                logger.info(f"–ù–∞–π–¥–µ–Ω —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–π–ª–∏–∫: {holiday['name']}")
                return holiday  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏

    except FileNotFoundError:
        logger.warning("–§–∞–π–ª thematic_dates.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è thematic_dates.json")

    logger.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π–ª–∏–∫–∞")
    return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    user_id = update.effective_user.id

    if user_id not in subscribed_users:
        subscribed_users.add(user_id)
        save_subscriptions(subscribed_users)

        await update.message.reply_text(
            "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π–ª–∏–∫–∞—Ö –≤ The Binding of Isaac! üéÆ\n\n"
            "–û–∂–∏–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∫–æ–ª–æ 13:00 –ø–æ –ú–°–ö, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –∑–∞–±–µ–≥.\n"
            "–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /stop"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    else:
        await update.message.reply_text("–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! ‚úÖ")


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    user_id = update.effective_user.id

    if user_id in subscribed_users:
        subscribed_users.discard(user_id)
        save_subscriptions(subscribed_users)

        await update.message.reply_text(
            "–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üí©\n"
            "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await update.message.reply_text("–¢—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. ü§∑")


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
    user_id = update.effective_user.id

    total_subscribers = len(subscribed_users)
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_subscribers}\n"
        f"–¢–≤–æ–π ID: {user_id}"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")


async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –¥–µ–π–ª–∏–∫–µ."""
    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ
    holiday_data = check_if_daily_is_thematic()

    if holiday_data:
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–π–ª–∏–∫
        screenshot_path = "screenshots/" + holiday_data['screenshot']
        holiday_name = holiday_data['name']
        caption = f"üåö –°–µ–≥–æ–¥–Ω—è {holiday_name} - —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–π–ª–∏–∫! –£–¥–∞—á–∏!"

        try:
            if screenshot_path and os.path.exists(screenshot_path):
                with open(screenshot_path, 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=caption
                    )
            else:
                await update.message.reply_text(caption)

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–µ–π–ª–∏–∫–µ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await update.message.reply_text(caption)
    else:
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π–ª–∏–∫–∞
        await update.message.reply_text(
            "üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π–ª–∏–∫–∞.\n"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–µ–π–ª–∏–∫–∞")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    help_text = (
        "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π–ª–∏–∫–∞—Ö\n"
        "/stop - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/today - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–π–ª–∏–∫\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 13:00 –ø–æ –ú–°–ö, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–±–µ–≥!"
    )
    await update.message.reply_text(help_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(config.TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("today", today))
    application.add_handler(CommandHandler("help", help_command))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    job_queue = application.job_queue
    time_utc = time(10, 0, 0)  # 10:00 UTC = 13:00 –ú–°–ö
    job_queue.run_daily(send_daily_notification, time=time_utc, name="daily_isaac_notification")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()